(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{80:function(e,t,s){"use strict";s.r(t);var r=s(0),a=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"testing-finding-bugs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#testing-finding-bugs","aria-hidden":"true"}},[e._v("#")]),e._v(" Testing & Finding Bugs")]),s("h2",{attrs:{id:"black-box-testing"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#black-box-testing","aria-hidden":"true"}},[e._v("#")]),e._v(" Black Box Testing")]),s("p",[e._v("Tester considers only the expected behaviour of the function, with no access to implementation details.")]),s("p",[e._v("Should consider what cases are likely to be error prone from the way the function behaves.")]),s("p",[e._v("Black box tests can be written before writing the code to solve a problem. If you have a comprehensive test suite before starting development, it is less likely that testing will be neglected.")]),s("p",[e._v("By thinking about corner cases in advance, less likely to make a mistake in developing & implementing an algorithm.")]),s("h2",{attrs:{id:"seven-steps-of-development"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#seven-steps-of-development","aria-hidden":"true"}},[e._v("#")]),e._v(" Seven Steps of Development")]),s("ol",[s("li",[e._v("Work a specific instance by hand")]),s("li",[e._v("Write down the specific process")]),s("li",[e._v("Generalise steps from 2")]),s("li",[e._v("Test steps")]),s("li",[e._v("Translate to code")]),s("li",[e._v("Test programme")]),s("li",[e._v("Debug programme")])]),s("h2",{attrs:{id:"designing-test-cases-error-handling"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#designing-test-cases-error-handling","aria-hidden":"true"}},[e._v("#")]),e._v(" Designing Test Cases: Error Handling")]),s("p",[e._v('Cover every possible error case. Make sure programme handles "wrong" input properly.')]),s("p",[e._v("If a programme requires N inputs, test with more than AND less than N.")]),s("p",[e._v("Make sure test cases test one error. Testing two different error conditions requires two separate tests.")]),s("p",[e._v("Test the boundaries: if a programme requires between 7 and 18 objects, test with 6, 7, 8, 17, 18 and 19 - ensure that the wrong number of elements is properly rejected, and the correct number of objects is accepted.")]),s("h2",{attrs:{id:"test-boundaries"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#test-boundaries","aria-hidden":"true"}},[e._v("#")]),e._v(" Test Boundaries")]),s("p",[e._v("Off by One Bugs/Errors (OBOBs) are common: maybe the programmer used "),s("code",[e._v("<")]),e._v(" where "),s("code",[e._v("<=")]),e._v(" was required, causing an "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Off-by-one_error",target:"_blank",rel:"noopener noreferrer"}},[e._v("off-by-one")]),e._v(" error.")]),s("h2",{attrs:{id:"designing-test-cases-correctness"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#designing-test-cases-correctness","aria-hidden":"true"}},[e._v("#")]),e._v(" Designing Test Cases: Correctness")]),s("p",[e._v("Tests are not just about errors - they should also ensure that the algorithm handles valid inputs correctly (i.e. that it gives the right answer).")]),s("p",[e._v("Think about:")]),s("ul",[s("li",[e._v("Special cases (e.g. Ace low straight in poker, where Ace is low).")]),s("li",[e._v("Requirements - consider potential misinterpretation, mis-implementation.")]),s("li",[e._v("Types - what if the implementer uses a data type that is too small, or the wrong type entirely?")]),s("li",[e._v("Off-by-one errors - if the algorithm involves counting, check the ends of ranges.")])]),s("h2",{attrs:{id:"inputs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#inputs","aria-hidden":"true"}},[e._v("#")]),e._v(" Inputs")]),s("ul",[s("li",[e._v("Numerical inputs, may be negative, zero, positive")]),s("li",[e._v("Sequences of data, test should include an empty set, a single element sequence, and a sequence with many elements.")]),s("li",[e._v("Characters: upper/lowercase letters, digits, punctuation, spaces, non-printable characters.")])]),s("p",[e._v("For many algorithms, there are problem specific categories -  testing a function related to prime numbers (e.g., isPrime), then you should consider prime and composite (not prime) numbers as input categories to cover.")]),s("p",[e._v("When you combine two ways to categorize data, cover all combinations. For example, if you have a sequence of numbers, you should test with")]),s("ul",[s("li",[e._v("An empty list.")]),s("li",[e._v("A single element sequence with 0.")]),s("li",[e._v("A single element sequence with a negative number.")]),s("li",[e._v("A single element sequence with a positive number.")]),s("li",[e._v("Have each of negative, zero, and positive numbers included in many-element sequences.")])]),s("p",[e._v("If your algorithm gives a set of answers where you can list all possible ones (true/false, values from an enum, a string from a particular set, etc), then your test cases should ensure that you get every answer at least once.")]),s("p",[e._v("If there are other conditions that you think are important, you should be sure that you get all possible answers for each of these conditions.")]),s("p",[e._v("For example, if you are getting a yes/no answer for a numeric input, you should test with a negative number that gives yes, a negative number that gives no, a positive number that gives yes, a positive number that gives no, and zero (zero being only one input, will have one answer).")]),s("h2",{attrs:{id:"test-harness"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#test-harness","aria-hidden":"true"}},[e._v("#")]),e._v(" Test Harness")]),s("p",[e._v("Code which is not part of the main programme, which runs and tests the main parts of the code. Developing such infrastructure can be expensive, but may be a good investment - particularly when the project is large.")]),s("h2",{attrs:{id:"references"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#references","aria-hidden":"true"}},[e._v("#")]),e._v(" References")]),s("ul",[s("li",[s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Off-by-one_error",target:"_blank",rel:"noopener noreferrer"}},[e._v("Off-by-one errors")])])])])}],!1,null,null,null);t.default=a.exports}}]);